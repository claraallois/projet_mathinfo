{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "     Pierre-François SAUNIER\n",
    "     Clara ALLOIS\n",
    "\n",
    "\n",
    "# PROJET NUMERIQUE: LIGNES DE NIVEAU\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1ère méthode : par dichotomie"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contour simple:\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Amorce : \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "f étant continûment différentiable, elle est continue, ainsi on est certain qu'il existe un t dans [0,1]  tq f(0,t)=c si (f(0,1)-c)*(f(0,0)-c)<0 d'après le théorème des valeurs intermédiaires.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_seed(f,c=0,eps=2**-26):\n",
    "    \n",
    "    def g(x,y):\n",
    "        return f(x,y)-c\n",
    "    a=0\n",
    "    b=1\n",
    "    if g(0,0)*g(0,1)>0:\n",
    "        return None\n",
    "    \n",
    "    while b-a>=eps:\n",
    "        mil=(a+b)/2\n",
    "        if g(0,a)*g(0,mil)<=0:\n",
    "            b=mil\n",
    "        else : \n",
    "            a=mil\n",
    "    return a\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.707106776535511"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f(x,y): return x**2+y**2\n",
    "find_seed(f,0.5,2**-26)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0,707**2=0.5 : ok ça fonctionne (ici x=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Propagation:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  on balaye régulièrement la figure avec un pas régulier suffisament petit et on utilise la dichotomie."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def find_seed2(f,abscisse,c=0,eps=2**-26):\n",
    "    \n",
    "    def g(x,y):\n",
    "        return f(x,y)-c\n",
    "    \n",
    "    a=0\n",
    "    b=1\n",
    "    if g(abscisse,0)*g(abscisse,1)>0:\n",
    "        return None\n",
    "    \n",
    "    while b-a>=eps:\n",
    "        mil=(a+b)/2\n",
    "        if g(abscisse,a)*g(abscisse,mil)<=0:\n",
    "            b=mil\n",
    "        else : \n",
    "            a=mil\n",
    "    return a\n",
    "\n",
    "\n",
    "\n",
    "def simple_contour(f,c=0.0,delta=0.01,eps=2**-26):\n",
    "    pas=delta/sqrt(2)\n",
    "    abscisse=0.0\n",
    "    X=[]\n",
    "    Y=[]\n",
    "    while abscisse<=1 and find_seed2(f,abscisse,c,eps)!=None:\n",
    "        X.append(abscisse)\n",
    "        Y.append(find_seed2(f,abscisse,c,eps))\n",
    "        abscisse+=pas\n",
    "        \n",
    "    return (X,Y)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "##1er exemple\n",
    "def f(x,y):\n",
    "    return x**2+y**2\n",
    "\n",
    "(X,Y)=simple_contour(f,c=1.0,delta=0.01,eps=2**-26)\n",
    "plt.plot(X,Y)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "##2eme exemple\n",
    "def f(x,y):\n",
    "    return (exp(-x**2-y**2)-exp(-(x-1)**2-(y-1)**2))\n",
    "\n",
    "(X,Y)=simple_contour(f,c=0.5,delta=0.001,eps=2**-26)\n",
    "plt.plot(X,Y)\n",
    "\n",
    "\n",
    "(X1,Y1)=simple_contour(f,c=0,delta=0.001,eps=2**-26)\n",
    "plt.plot(X1,Y1)\n",
    "\n",
    "\n",
    "(X2,Y2)=simple_contour(f,c=0.25,delta=0.001,eps=2**-26)\n",
    "plt.plot(X2,Y2)\n",
    "\n",
    "plt.show()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Commentaires: Cette méthode fonctionne mais présente des inconvénients :\n",
    "\n",
    "-couteuse car non optimisée\n",
    "\n",
    "-la méthode de dichotomie permet de détecter un seul zéro d'où pb si la ligne fait des boucles.\n",
    "\n",
    "Il faut donc redéfinir une méthode dichotomique ou utliser une autre méthode.\n",
    "On a choisit d'utiliser une méthode de Newton pour cibler plus précisément la recherche."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Contour complexe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dichotomie brute, on balaye horizontalement et verticalement chaque carré qui forment la portion rectangulaire"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "def find_seed_ordonnee(f,abscisse,ybas,yhaut,c,eps=2**(-26)): #dichotomie verticale à une abscisse fixée avec une limite basse et une limite haute\n",
    "    \n",
    "    def g(x,y):\n",
    "        return (f(x,y)-c)\n",
    "    \n",
    "    if g(abscisse,ybas)*g(abscisse,yhaut)>0:\n",
    "        return(None)\n",
    "    a=ybas\n",
    "    b=yhaut\n",
    "    \n",
    "    while b-a >= eps:\n",
    "        mil=(a+b)/2\n",
    "        if g(abscisse,a)*g(abscisse,mil)<=0:\n",
    "            b=mil\n",
    "        else:\n",
    "            a=mil\n",
    "    return(b)\n",
    "\n",
    "\n",
    "##############\n",
    "def find_seed_abscisse(f,ordonnee,xgauche,xdroit,c,eps=2**(-26)): #dichotomie horizontale à une ordonée fixée avec une limite basse et une limite haute\n",
    "    \n",
    "    \n",
    "    def g(x,y):\n",
    "        return (f(x,y)-c)\n",
    "    \n",
    "    if g(xgauche,ordonnee)*g(xdroit,ordonnee)>0:\n",
    "        return(None)\n",
    "    a=xgauche\n",
    "    b=xdroit\n",
    "    \n",
    "    while b-a >= eps:\n",
    "        mil=(a+b)/2\n",
    "        if g(a,ordonnee)*g(mil,ordonnee)<=0:\n",
    "            b=mil\n",
    "        else:\n",
    "            a=mil\n",
    "    return(b)\n",
    "\n",
    "    \n",
    "#######\n",
    "def contour(f,xgauche,xdroit,ybas,yhaut,c,delta=0.01,eps=2**-13):\n",
    "    \n",
    "    pas = delta / np.sqrt(2)\n",
    "    \n",
    "    \n",
    "    \n",
    "    abscisse = xgauche\n",
    "    X1=[]\n",
    "    Y1=[]\n",
    "    while abscisse<=xdroit and find_seed_ordonnee(f,abscisse,ybas,yhaut,c,eps)!=None:\n",
    "        X1.append(abscisse)\n",
    "        Y1.append(find_seed_ordonnee(f,abscisse,ybas,yhaut,c,eps))\n",
    "        abscisse=abscisse + pas\n",
    "    plt.plot(X1,Y1)\n",
    "    # on balaye verticalement de xgauche à xdroite \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    abscisse = xdroit\n",
    "    X2=[]\n",
    "    Y2=[]\n",
    "    while abscisse>=xgauche and find_seed_ordonnee(f,abscisse,ybas,yhaut,c,eps)!=None:\n",
    "        X2.append(abscisse)\n",
    "        Y2.append(find_seed_ordonnee(f,abscisse,ybas,yhaut,c,eps))\n",
    "        \n",
    "        abscisse=abscisse - pas\n",
    "    plt.plot(X2,Y2)\n",
    "    # on balaye verticalement de xdroit à xgauche \n",
    "    \n",
    "    \n",
    "    \n",
    "    ordonnee = ybas\n",
    "    X3=[]\n",
    "    Y3=[]\n",
    "    while ordonnee<=yhaut and find_seed_abscisse(f,ordonnee,xgauche,xdroit,c,eps)!=None:\n",
    "        X3.append(find_seed_abscisse(f,ordonnee,xgauche,xdroit,c,eps))\n",
    "        Y3.append(ordonnee)\n",
    "        ordonnee=ordonnee + pas\n",
    "    plt.plot(X3,Y3)\n",
    "    #on balaye horizontalement de ybas à yhaut\n",
    "    \n",
    "\n",
    "    ordonnee = yhaut\n",
    "    X4=[]\n",
    "    Y4=[]\n",
    "    while ordonnee>=ybas and find_seed_abscisse(f,ordonnee,xgauche,xdroit,c,eps)!=None:\n",
    "        X4.append(find_seed_abscisse(f,ordonnee,xgauche,xdroit,c,eps))\n",
    "        Y4.append(ordonnee)\n",
    "        ordonnee=ordonnee - pas\n",
    "    plt.plot(X4,Y4)\n",
    "    #on balaye horizontalement de yhaut à ybas\n",
    "\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def f(x,y):\n",
    "    return (exp(-x**2-y**2)-exp(-(x-1)**2-(y-1)**2))\n",
    "\n",
    "####\n",
    "cote = [-1 , 0 , 1 , 2 ]\n",
    "for i in range(len(cote)-1):\n",
    "    for j in range(len(cote)-1):\n",
    "        for c in [-1.5 , -1 , -0.5 , 0 , 0.5 , 1 , 1.5 ] :\n",
    "            contour(f,cote[i],cote[i+1],cote[j],cote[j+1],c)\n",
    "#on cherche pour la fonction f les lignes de niveau entre -1,5 et 1,5.\n",
    "#pour ce faire on découpe la figure en plusieurs carrés dont les abscisses et ordonnes limites sont listées dans cote\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rq: ce programme ne donne pas toutes les lignes de niveau sur mon ordi(Clara) mais sur celui de PF on obtient une figure plus complète..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2ème méthode moins naïve : en utilisant Newton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "import autograd\n",
    "import autograd.numpy as np\n",
    "from math import *\n",
    "from matplotlib import pyplot as plt\n",
    "###\n",
    "\n",
    "\n",
    "def gradient(f,x,y): \n",
    "    g = autograd.grad\n",
    "    return np.r_[g(f,0)(x,y) , g(f,1)(x,y)]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "On reprend la méthode du poly (en annexe) pour calculer le gradient"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def newton(f,x0,n=10):\n",
    "    x = x0\n",
    "    derivee=autograd.grad(f)\n",
    "    for i in range(n):\n",
    "        x=x-f(x)/derivee(x)\n",
    "    return x\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Recherche de zéro par la méthode de Newton"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def point_suivant(f,c,x0,y0,delta):\n",
    "    grad = gradient(f,x0,y0)                                #on calcule le gradient en (x0,y0)\n",
    "    grad = grad / sqrt( grad[0]**2 + grad[1]**2)           #on normalise le gradient\n",
    "    tangente = (grad[1] , -grad[0] )                        # la tangente est normale au gradient. Si le gradient vaut (a,b) la tangente est (-b,a)\n",
    "    theta0 = atan(tangente[1]/tangente[0])                 #on récupère l'angle correspondant à théta0\n",
    "    \n",
    "    \n",
    "    \n",
    "    def g(theta):                                       #g paramétrise f sur le cercle de rayon delta et de centre (x0,y0)\n",
    "        return f(x0+delta * np.cos(theta) , y0 + delta * np.sin(theta) ) - c\n",
    "    thetafinal = newton(g , theta0)\n",
    "    \n",
    "    return (x0 + delta * np.cos(thetafinal) , y0 + delta * np.sin(thetafinal) ) #renvoie le point suivant de notre ligne de niveau\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "on calcule le point suivant de notre ligne de niveau "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "x0,y0 = -0.5 , 0.0\n",
    "X=[x0]\n",
    "Y=[y0]\n",
    "x,y = x0 , y0\n",
    "for i in range(40):\n",
    "    x,y = point_suivant(f,f(x0,y0),x,y,0.1)\n",
    "    X.append(x)\n",
    "    Y.append(y)\n",
    "plt.clf()\n",
    "plt.plot(X,Y)\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Format de la Cellule Texte Brut",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
